#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/ {
  behaviors {
        rot_kp: sensor_rotate_kp {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
    };

  sensors {
    compatible = "zmk,keymap-sensors";
    sensors = <&encoder0>;
    triggers-per-rotation = <24>;
  };

  macros {
    //Linux macros

    arch_fan:arch_fan {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp LG(F)>;
        label = "ARCH_FAN";
    };
    
    arch_print:arch_print{
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp LG(P)>;
        label = "ARCH_PRINT";
    };

    arch_hyprlock:arch_hyprlock{
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp LG(L)>;
        label = "ARCH_hyprlock";
    };

    arch_power_60:arch_power_60{
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp LG(LA(LC(N1)))>;
        label = "ARCH_power_60";
    };
    arch_power_80:arch_power_80{
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp LG(LA(LC(N2)))>;
        label = "ARCH_power_80";
    };

    arch_power_100:arch_power_100{
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp LG(LA(LC(N3)))>;
        label = "ARCH_power_100";
    };

    arch_calculator:arch_calculator{
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp LA(LC(C))>;
        label = "ARCH_calculator";
        };
    arch_mic:arch_mic{
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp LC(LA(M))>;
        label = "ARCH_mic";
    };



    windows_sleep:windows_sleep{
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp LG(LA(S))>;
        label = "WINDOWS_sleep";
    };
    windows_down:windows_down{
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp LG(LA(D))>;
        label = "WINDOWS_down";
    };
    windows_restart:windows_restart{
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp LG(LA(R))>;
        label = "WINDOWS_restart";
    };
    windows_mic_toggle:windows_mic_toggle{
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp RC(RA(M))>;
        label = "WINDOWS_mic_toggle";
    };
    windows_discord:windows_discord{
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp LC(LA(D))>;
        label = "WINDOWS_discord";
    };
    windows_music:windows_music{
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp LC(LA(M))>;
        label = "WINDOWS_music";
    };
    windows_terminal:windows_terminal{
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp LG(Q)>;
        label = "WINDOWS_terminal";
    };
    windows_terminal_here:windows_terminal_here{
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <
        &kp LS(F10)
        &macro_wait_time 500
        &kp T
        >;
        label = "WINDOWS_terminal_here";
    };
    windows_myasus:windows_myasus{
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp LC(LA(A))>;
        label = "WINDOWS_myasus";
    };


  };


  keymap {
    compatible = "zmk,keymap";

    default_layer { /*LINUX*/
      bindings = <
        &arch_fan    &arch_hyprlock    &kp C_RESET   &kp C_POWER
        &arch_calculator  &arch_power_60     &arch_power_80    &arch_power_100
        &kp C_MUTE    &arch_mic     &kp MINUS &kp EQUAL
        &arch_print &kp C_PREVIOUS &kp C_PLAY_PAUSE &kp C_NEXT
        &to(1)
      >;
        sensor-bindings = <&rot_kp C_VOL_UP C_VOL_DN>;
    };

    layer_1 { /*Windows*/
      bindings = <
        &to(0) &windows_sleep &windows_restart &windows_down
        &kp C_AL_CALC &windows_discord &windows_music &windows_myasus
        &kp C_MUTE &windows_mic_toggle &windows_terminal &windows_terminal_here
        &kp PRINTSCREEN &kp C_PREVIOUS &kp C_PLAY_PAUSE &kp C_NEXT
        &to(2)
      >;
        sensor-bindings = <&rot_kp C_VOL_UP C_VOL_DN>;
      /* encoder-bindings = < &none &none >; */
    };
    layer_2 { /*Numpad*/
      bindings = <
        &kp N7 &kp N8 &kp N9 &kp KP_PLUS
        &kp N4 &kp N5 &kp N6 &kp KP_MINUS
        &kp N1 &kp N2 &kp N3 &kp KP_MULTIPLY
        &kp KP_DIVIDE &kp N0 &kp KP_DOT &kp ENTER
        &to(3)
      >;
        sensor-bindings = <&rot_kp C_VOL_UP C_VOL_DN>;
      /* encoder-bindings = < &none &none >; */
    };

        layer_3 {       /*bt Setting*/
      bindings = <
        &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3
        &none &none &none &none
        &none &to(0) &to(1) &to(2)
        &bt BT_CLR &none &none &none
        &to(0)
      >;
        sensor-bindings = <&rot_kp C_VOL_UP C_VOL_DN>;
      /* encoder-bindings = < &none &none >; */
    };

  };
};
